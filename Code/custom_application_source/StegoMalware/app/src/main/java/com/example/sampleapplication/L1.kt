package com.example.sampleapplication

import android.graphics.Bitmap
import android.graphics.Color
import android.util.Log
import org.opencv.core.Mat
import org.opencv.core.Point
import org.opencv.core.Rect
import org.opencv.core.Scalar

class L1 {
    // LSB
    fun d1(bitmap: Bitmap): String {
        // decodeRGB with bitmap
        var binaryMessage = StringBuilder()

        Log.i("Stego", "${bitmap.width}-${bitmap.height}")
        for (y in 0 until bitmap.height) {
            for (x in 0 until bitmap.width) {
                val pixel = bitmap.getPixel(x, y)
                val blue = Color.blue(pixel)
                val red = Color.red(pixel)
                val green = Color.green(pixel)

                binaryMessage = Utils.appendBit(binaryMessage, red, green, blue)
            }
        }
        Log.i("Stego", binaryMessage.length.toString())
        return Utils.bitsToString(binaryMessage)
    }

    fun d2(mat: Mat): String{
        // decodeRGB with openCV
        var binaryMessage = StringBuilder()
        for (x in 0 until mat.height()) {
            for (y in 0 until mat.width()) {
                val pixel = mat.get(x, y)
                val red = pixel[2].toInt()
                val green = pixel[1].toInt()
                val blue = pixel[0].toInt()

                binaryMessage = Utils.appendBit(binaryMessage, red, green, blue)
            }
        }

        return Utils.bitsToString(binaryMessage)
    }

    fun d3(mat: Mat): String {
        // decode L-1
        val binaryMessage = StringBuilder()
        for(x in 0 until mat.height()){
            for (y in 0 until mat.width()){
                val pixel = mat.get(x, y)
                binaryMessage.append(pixel[0].toInt() and 1)
            }
        }

        return Utils.bitsToString(binaryMessage)
    }

    fun d4(mat: Mat): String{
        // decode RGBA Square
        var binaryMessage = String()
        val blockWidth = mat.width() / 3
        val blockHeight = mat.height() / 3

        var idx = 1
        for (row in 0 until 3){
            for (col in 0 until 3) {
                if (idx == 1 || idx == 5 || idx == 9) {
                    Log.i("Stego", idx.toString())
                    val x1 = col * blockWidth
                    val y1 = row * blockHeight

                    val x2 = if (col < 2) (x1 + blockWidth) else mat.width()
                    val y2 = if (row < 2) (y1 + blockHeight) else mat.height()

                    val p1 = Point(x1.toDouble(), y1.toDouble())
                    val p2 = Point(x2.toDouble(), y2.toDouble())

                    val rect = Rect(p1, p2)
                    val croppedMat = Mat(mat, rect)
                    binaryMessage += d2(croppedMat)

                    Log.i("Stego", binaryMessage)
                }
                idx += 1
            }
        }

        return binaryMessage
    }

    fun d5(mat: Mat): String{
        // decode L 1 Square
        var binaryMessage = String()
        val blockWidth = mat.width() / 3
        val blockHeight = mat.height() / 3

        var idx = 1
        for (row in 0 until 3){
            for (col in 0 until 3) {
                if (idx == 1 || idx == 5 || idx == 9) {
                    Log.i("Stego", idx.toString())
                    val x1 = col * blockWidth
                    val y1 = row * blockHeight

                    val x2 = if (col < 2) (x1 + blockWidth) else mat.width()
                    val y2 = if (row < 2) (y1 + blockHeight) else mat.height()

                    val p1 = Point(x1.toDouble(), y1.toDouble())
                    val p2 = Point(x2.toDouble(), y2.toDouble())

                    val rect = Rect(p1, p2)
                    val croppedMat = Mat(mat, rect)
                    binaryMessage += d3(croppedMat)

                    Log.i("Stego", binaryMessage)
                }
                idx += 1
            }
        }

        return binaryMessage
    }
}