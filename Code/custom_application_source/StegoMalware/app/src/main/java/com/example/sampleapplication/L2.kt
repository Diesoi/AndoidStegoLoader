package com.example.sampleapplication

import android.content.Context
import android.graphics.Bitmap
import android.graphics.Color
import android.util.Log
import org.opencv.core.Mat
import org.opencv.core.Point
import org.opencv.core.Rect
import org.opencv.core.Scalar
import java.io.IOException
import kotlin.reflect.typeOf

class L2 {
    //OceanLotus
    fun d1(bitmap: Bitmap): String {

        // decode RBG bitmap Ocean

        var binaryMessage = StringBuilder()
        //Log.i("Stego", "${bitmap.width}-${bitmap.height}")
        val pixel = bitmap.getPixel(0,0)
        val blue = Color.blue(pixel).toString(2)
        //Log.i("Stego", (blue and 1).toString())
        Log.i("Stego", blue.substring(blue.length - 3))
        /*for (y in 0 until bitmap.height) {
            for (x in 0 until bitmap.width) {
                val pixel = bitmap.getPixel(x, y)
                val blue = Color.blue(pixel)
                val red = Color.red(pixel)
                val green = Color.green(pixel)

                binaryMessage = Utils.appendBit(binaryMessage, red, green, blue)
            }
        }*/
        Log.i("Stego", binaryMessage.length.toString())
        return Utils.bitsToString(binaryMessage)
    }

    fun d2(mat: Mat): String {
        //decode RGB openCV Ocean
        var binaryMessage = StringBuilder()
        for (x in 0 until mat.height()) {
            for (y in 0 until mat.width()) {
                val pixel = mat.get(x, y)
                var red = pixel[2].toInt().toString(2).padStart(8, '0')
                var green = pixel[1].toInt().toString(2).padStart(8, '0')
                var blue = pixel[0].toInt().toString(2).padStart(8, '0')

                red = red.substring(red.length - 3)
                green = green.substring(green.length - 3)
                blue = blue.substring(blue.length - 2)

                binaryMessage = Utils.appendBit(binaryMessage, red, green, blue)
            }
        }
        Log.i("Stego", binaryMessage.toString())
        return Utils.bitsToString(binaryMessage)
    }
}