package com.example.sampleapplication

import android.R
import android.graphics.BitmapFactory
import android.os.Build
import android.os.Bundle
import android.util.Log
import android.widget.TextView
import androidx.activity.enableEdgeToEdge
import androidx.annotation.RequiresApi
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import org.opencv.android.OpenCVLoader
import java.io.InputStream


class MainActivity : AppCompatActivity() {

    @RequiresApi(Build.VERSION_CODES.TIRAMISU)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContentView(com.example.sampleapplication.R.layout.activity_main)
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(com.example.sampleapplication.R.id.main)) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }

        val l = L1()

        //Sequential LSB
        //RGB
        val bitmap = Utils.loadBitmapFromDrawable(this,
            com.example.sampleapplication.R.drawable.icon_rgb_original_seq_lsb)
        Log.i("MainActivity", l.d1(bitmap).toString())

        val output = l.d1(bitmap)
        val pattern = Regex("(\\w+)\\(([^()]+)\\)").find(output.split(".")[1])
        val functionName = pattern?.groupValues?.get(1)
        val param = pattern?.groupValues?.get(2)

        val textView: TextView = findViewById(com.example.sampleapplication.R.id.myTextView)
        if (functionName != null) {
            Utils.callDynamicApiByName(textView, functionName, CharSequence::class.java, param)
        }

        //RGBA
        if (!OpenCVLoader.initDebug()) {
            Log.e("OpenCV", "Failed to load OpenCV")
        }
        val mat = Utils.loadImageBytesFromFile(this,
            com.example.sampleapplication.R.drawable.exo_icon_next_seq_lsb)
        mat?.let { SteganographyLSB.decodeRGB(it).toString() }?.let { Log.i("MainActivity", it) }

        //LA
        val mat1 = Utils.loadImageBytesFromFile(this,
            com.example.sampleapplication.R.drawable.fb_ic_checkmark_original_la_seq_lsb)
        val output = l.d3(mat1)
        val pattern = Regex("(\\w+)\\(([^()]+)\\)").find(output.split(".")[1])
        val functionName = pattern?.groupValues?.get(1)
        val param = pattern?.groupValues?.get(2)

        val textView: TextView = findViewById(com.example.sampleapplication.R.id.myTextView)
        if (functionName != null) {
            Utils.callDynamicApiByName(textView, functionName, CharSequence::class.java, param)
        }
        mat1?.let{SteganographyLSB.decodeLA_1(it).toString()}?.let{Log.i("MainActivity", it)}

        //1
        val mat3 = Utils.loadImageBytesFromFile(this,
            com.example.sampleapplication.R.drawable.exo_icon_fullscreen_enter_1)
        mat3?.let{SteganographyLSB.decodeLA_1(it).toString()}?.let{Log.i("MainActivity", it)}

        //Square LSB
        val mat4 = Utils.loadImageBytesFromFile(this,
            com.example.sampleapplication.R.drawable.mcd_launcher_rgb_squ)
        mat4?.let{SteganographyLSB.decodeRGBA_Square(it).toString()}?.let{Log.i("MainActivity", it)}

        val mat5 = Utils.loadImageBytesFromFile(this,
            com.example.sampleapplication.R.drawable.exo_icon_fullscreen_enter_la_sq)
        mat5?.let{SteganographyLSB.decodeLA_1_Square(it).toString()}?.let{Log.i("MainActivity", it)}

        // Ocean Lotus sequential
        val mat6 = Utils.loadImageBytesFromFile(this,
            com.example.sampleapplication.R.drawable.mcd_launcher_ocean_rgba)
        mat6?.let{SteganographyOCEAN.decodeRGB(it).toString()}?.let{Log.i("MainActivity", it)}
    }
}